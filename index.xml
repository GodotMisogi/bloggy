<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GOOD VIBRATIONS</title>
    <link>https://godotmisogi.github.io/bloggy/index.xml</link>
    <description>Recent content on GOOD VIBRATIONS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Dec 2016 16:54:58 +0530</lastBuildDate>
    <atom:link href="https://godotmisogi.github.io/bloggy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dubby Pendy - A Double Pendulum Simulator</title>
      <link>https://godotmisogi.github.io/bloggy/post/dubby-pendy/</link>
      <pubDate>Tue, 27 Dec 2016 16:54:58 +0530</pubDate>
      
      <guid>https://godotmisogi.github.io/bloggy/post/dubby-pendy/</guid>
      <description>&lt;script src=&#34;https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Learning about Lagrangian and Hamiltonian mechanics introduced me to an entirely new way of solving physics problems. The first time I&amp;rsquo;d read about this topic was in &lt;a href=&#34;http://www.feynmanlectures.caltech.edu/II_19.html&#34;&gt;The Principle of Least Action&lt;/a&gt; chapter in &lt;a href=&#34;http://www.feynmanlectures.caltech.edu/II_toc.html&#34;&gt;Vol. 2 of The Feynman Lectures on Physics&lt;/a&gt;. I was introduced to a different perspective of viewing the physical world, perhaps a more general one than Newton&amp;rsquo;s laws.&lt;/p&gt;

&lt;p&gt;A famous example of a system whose equations of motion can be more easily attained using Lagrangian or Hamiltonian mechanics is the double pendulum. I saw a &lt;a href=&#34;http://scienceworld.wolfram.com/physics/DoublePendulum.html&#34;&gt;Wolfram Science animation&lt;/a&gt; of the system, but it didn&amp;rsquo;t have the right &lt;code&gt;a e s t h e t i c&lt;/code&gt; for me, and I wanted to write one of my own to investigate the system for various initial conditions and its chaotic behaviour.&lt;/p&gt;

&lt;p&gt;The following shows the double pendulum system:&lt;/p&gt;

&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;../DubbyPendy.svg&#34; width=&#34;80%&#34;&gt;&lt;/div&gt;

&lt;p&gt;The Lagrangian of the system is:&lt;/p&gt;

&lt;p&gt;$$ \mathcal{L} = T - V $$&lt;br /&gt;
$$ T = \frac{1}{2}m_1 l_1^2 \dot{\theta}_1^2 + \frac{1}{2}m_2\left[l_1^2 \dot{\theta}_1^2 + l_2^2 \dot{\theta}_2^2 + 2l_1 l_2 \dot{\theta}_1 \dot{\theta}_2 \cos(\theta_1 - \theta_2)\right]$$&lt;br /&gt;
$$ V = -(m_1 + m_2)gl_1\cos \theta_1 - m_2gl_2\cos\theta_2 $$&lt;/p&gt;

&lt;p&gt;After a very long &lt;a href=&#34;http://scienceworld.wolfram.com/physics/DoublePendulum.html&#34;&gt;derivation&lt;/a&gt;, Hamilton&amp;rsquo;s equations can be obtained:&lt;/p&gt;

&lt;p&gt;$$ \dot{\theta_1} = \frac{l_2 p_{\theta_1} - l_1 p_{\theta_2}\cos(\theta_1 - \theta_2)}{l_1^2 l_2[m_1 + m_2\sin^2(\theta_1-\theta_2)]} $$&lt;br /&gt;
$$ \dot{\theta_2} = \frac{l_1 (m_1 + m_2)p_{\theta_1} - l_2 m_2 p_{\theta_1}\cos(\theta_1 - \theta_2)}{l_1^2 l_2[m_1 + m_2\sin^2(\theta_1-\theta_2)]} $$&lt;br /&gt;
$$ \dot{p_{\theta_1}} = -(m_1 + m_2)gl_1\sin\theta_1 - C_1 + C_2$$&lt;br /&gt;
$$ \dot{p_{\theta_2}} = -m_2gl_2\sin\theta_2 + C_1 - C_2$$&lt;br /&gt;
$$ C_1 = \frac{p_{\theta_1}p_{\theta_2}\sin(\theta_1-\theta_2)}{l_1 l_2[m_1 + m_2\sin^2(\theta_1-\theta_2)]} $$&lt;br /&gt;
$$ C_2 = \frac{l_2^2 m_2 p_{\theta_1}^2 + l_1^2(m_1 + m_2)p_{\theta_2}^2 - l_1 l_2 m_2 p_{\theta_1} p_{\theta_2} \cos(\theta_1 - \theta_2)}{2l_1^2 l_2^2[m_1 + m_2\sin^2(\theta_1-\theta_2)]^2}\sin[2(\theta_1 - \theta_2)] $$&lt;/p&gt;

&lt;p&gt;These are very formidable-looking equations, and it is almost impossible to determine the particle trajectories by solving these equations analytically! So how does one solve it for practical purposes? Numerical methods and programming. I used Lua to program the simulator, including the &lt;a href=&#34; https://love2d.org&#34;&gt;LÖVE&lt;/a&gt; framework for the graphics.&lt;/p&gt;

&lt;p&gt;Since the only data structure in Lua is a table, I decided to see how I could make use of that property for this program. Lua doesn&amp;rsquo;t have functions to perform scalar multiplication or addition between tables, so I wrote some:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lua&#34;&gt;function directSum(a, b)

    local c = {}
    for i,v in pairs(a) do
        c[i] = a[i] + b[i]
    end
    return c
end

function scalarMultiply(scalar, table)
    local output = {}
    for i,v in pairs(table) do
        output[i] = scalar*table[i]
    end
    return output
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now I can store values, such as the initial conditions and parameters of the system in a table and perform basic arithmetic operations between tables to change values. Now to implement the physics of the problem.&lt;/p&gt;

&lt;p&gt;First, I defined a generator that randomly generates initial values (within a given range) of the masses of the bobs, the lengths of the rods, their angles with respect to the vertical, their initial angular velocities and calculated the momenta of the bobs. This is fed into a table called &lt;code&gt;data&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lua&#34;&gt;function Generator()

    local self = {}

    self.m1 = love.math.random( 3, 10 )
    self.m2 = love.math.random( 3, 10 )
    self.l1 = love.math.random( 3, 10 )
    self.l2 = love.math.random( 1, 10 )
    self.t1 = love.math.random( -6.28, 6.28 )
    self.t2 = love.math.random( -6.28, 6.28 )
    self.o1 = love.math.random( -4, 4 )
    self.o2 = love.math.random( -2, 2 )
    self.p1 = (self.m1+self.m2)*(math.pow(self.l1, 2))*self.o1 
    + self.m2*self.l1*self.l2*self.o2*math.cos(self.t1-self.t2)
    self.p2 = self.m2*(math.pow(self.l2, 2))*self.o2 
    + self.m2*self.l1*self.l2*self.o1*math.cos(self.t1-self.t2)
    return self
end

data = Generator()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we set up the equations of motion using a function called &lt;code&gt;Hamiltonian&lt;/code&gt;. It takes the initial values from &lt;code&gt;data&lt;/code&gt; to perform calculations, and a new table called &lt;code&gt;phase&lt;/code&gt; which consists of the phase space variables to update the angles and momenta over time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lua&#34;&gt;function Hamiltonian(phase, data)

    local update = {}

    t1 = phase[1]
    t2 = phase[2]
    p1 = phase[3]
    p2 = phase[4]
    C0 = data.l1*data.l2*(data.m1+data.m2*math.pow(math.sin(t1-t2),2))
    C1 = (p1*p2*math.sin(t1-t2))/C0
    C2 = (data.m2*(math.pow(data.l2*p1,2))+(data.m1+data.m2)*
    (math.pow(data.l1*p2, 2))-2*data.l1*data.l2*data.m2*p1*p2*
    math.cos(t1-t2))*math.sin(2*(t1-t2))/(2*(math.pow(C0,2)))

    update[1] = (data.l2*p1 - data.l1*p2*math.cos(t1-t2)) / (data.l1*C0)
    update[2] = (data.l1*(data.m1+data.m2)*p2 - data.l2*data.m2*p1*
                math.cos(t1-t2)) / (data.l2*data.m2*C0)
    update[3] = -(data.m1 + data.m2)*g*data.l1*math.sin(t1) - C1 + C2
    update[4] = -data.m2*g*data.l2*math.sin(t2) + C1 - C2

    return update
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the required information with regard to the physics is now processed. To solve the differential equations, I implemented the Runge-Kutta method of order 4, performing operations on the tables using &lt;code&gt;directSum&lt;/code&gt; and &lt;code&gt;scalarMultiply&lt;/code&gt;. These operations take place in &lt;code&gt;Solver&lt;/code&gt;, which takes the time input &lt;code&gt;dt&lt;/code&gt; from LÖVE in &lt;code&gt;love.update()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;Lua&#34;&gt;function Solver(dt)

    local phase = {data.t1, data.t2, data.p1, data.p2}

    local k1 = Hamiltonian(phase, data)
    local k2 = Hamiltonian(directSum(phase, scalarMultiply(dt/2, k1)), data)
    local k3 = Hamiltonian(directSum(phase, scalarMultiply(dt/2, k2)), data)
    local k4 = Hamiltonian(directSum(phase, scalarMultiply(dt, k3)), data)

    local R = scalarMultiply(1/6 * dt, 
    directSum(directSum(k1, scalarMultiply(2.0, k2)), 
    directSum(scalarMultiply(2.0, k3), k4)))

    data.t1 = data.t1 + R[1]
    data.t2 = data.t2 + R[2]
    data.p1 = data.p1 + R[3]
    data.p2 = data.p2 + R[4]
end

function love.update()
    Solver(dt)
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the graphics end, I obtain nice animations like this:&lt;br /&gt;
&lt;pre&gt;&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;../DubbyPendy.gif&#34; width=&#34;100%&#34;&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll probably end up creating a new post with cool patterns emerging from this simulation, possibly checking for chaotic behaviour with initial conditions that are not so different from a previous state.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculus of Variations - Induced Drag Over a Wing</title>
      <link>https://godotmisogi.github.io/bloggy/post/calculus-of-variations-induced-drag/</link>
      <pubDate>Mon, 26 Dec 2016 01:55:24 +0530</pubDate>
      
      <guid>https://godotmisogi.github.io/bloggy/post/calculus-of-variations-induced-drag/</guid>
      <description>&lt;p&gt;While reading through John D. Anderson Jr.&amp;rsquo;s derivation of minimum induced drag, I thought of a cool application of the calculus of variations in one of the equations to deduce the required condition.&lt;/p&gt;

&lt;p&gt;The equation that determines the downwash at a point is:&lt;/p&gt;

&lt;p&gt;$$w(y_0) = \frac{1}{4\pi}\int^{b/2}_{-b/2} \frac{(\mathrm{d}\Gamma/\mathrm{d}y)}{y_0 - y}\mathrm{d}y = \int^{b/2}_{-b/2} \mathcal{L}(\Gamma,\Gamma&amp;rsquo;,y)\;\mathrm{d}y$$&lt;/p&gt;

&lt;p&gt;This effectively implies that the downwash can be expressed as a &lt;em&gt;functional&lt;/em&gt; of $\Gamma$, i.e. $w\left[\Gamma(y)\right]$, and one can find the functional derivative to find the extremal point. There also exists a constraint on this system, the total lift across the span must be constant:&lt;/p&gt;

&lt;p&gt;$$ L = \rho_{\infty} V_{\infty}\int^{b/2}_{-b/2} \Gamma(x)\;\mathrm{d}x = \int^{b/2}_{-b/2} \mathcal{G}(\Gamma,\Gamma&amp;rsquo;,x)\;\mathrm{d}x$$&lt;/p&gt;

&lt;p&gt;The Euler-Lagrange equations thus take the following form:&lt;/p&gt;

&lt;p&gt;$$ \frac{\partial{\mathcal{L}}}{\partial{\Gamma}} - \frac{\mathrm{d}}{\mathrm{d}y}\left(\frac{\partial{\mathcal{L}}}{\partial{\Gamma&amp;rsquo;}}\right) + \lambda\left[\frac{\partial{\mathcal{G}}}{\partial{\Gamma}} - \frac{\mathrm{d}}{\mathrm{d}y}\left(\frac{\partial{\mathcal{G}}}{\partial{\Gamma&amp;rsquo;}}\right)\right]= 0 $$&lt;/p&gt;

&lt;p&gt;Substituting the expressions:&lt;/p&gt;

&lt;p&gt;$$ \frac{1}{4\pi(y_0 - y)^2} + \rho_{\infty}V_{\infty}\lambda = 0$$&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t contain any useful information about the downwash. Let&amp;rsquo;s try something else.&lt;/p&gt;

&lt;p&gt;Trying to minimise the induced drag formula directly as given by Anderson:&lt;/p&gt;

&lt;p&gt;$$ C_{D,i} = \frac{2}{V_{\infty}S}\int^{b/2}_{-b/2} \Gamma(x)\alpha_{i}(x)\;\mathrm{d}x = \frac{2}{V_{\infty}S}\int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\frac{\Gamma(x)\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\;\mathrm{d}x $$&lt;/p&gt;

&lt;p&gt;Performing a variation on the coefficient of induced drag, we get:&lt;/p&gt;

&lt;p&gt;$$ \delta C_{D,i} = \int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\left(\delta\Gamma(x)\frac{\Gamma&amp;rsquo;(y)}{x - y} + \delta\Gamma&amp;rsquo;(y)\frac{\Gamma(x)}{x - y}\right) \;\mathrm{d}y\;\mathrm{d}x $$&lt;/p&gt;

&lt;p&gt;Performing integration by parts on the second expression, keeping in mind that the first term of the evaluation disappears because the circulation at the endpoints (the boundary conditions of this problem) is zero:&lt;/p&gt;

&lt;p&gt;$$ = \int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\delta\Gamma(x)\frac{\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\;\mathrm{d}x - \int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\delta\Gamma(y)\cdot\frac{\mathrm{d}}{\mathrm{d}y}\left(\frac{\Gamma(x)}{x-y}\right)\;\mathrm{d}y\;\mathrm{d}x$$&lt;/p&gt;

&lt;p&gt;A little rearranging provides the more useful form:&lt;/p&gt;

&lt;p&gt;$$ = \int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\delta\Gamma(x)\frac{\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\;\mathrm{d}x + \int^{b/2}_{-b/2}\delta\Gamma(y)\cdot\frac{\mathrm{d}}{\mathrm{d}y}\int^{b/2}_{-b/2}\frac{\Gamma(x)}{y-x}\;\mathrm{d}x\;\mathrm{d}y$$&lt;/p&gt;

&lt;p&gt;A change of variables $y-x = q$ is required to evaluate the last integral:&lt;/p&gt;

&lt;p&gt;$$ \frac{\mathrm{d}}{\mathrm{d}y}\int^{b/2}_{-b/2}\frac{\Gamma(x)}{y-x}\;\mathrm{d}x = \frac{\mathrm{d}}{\mathrm{d}y}\int^{y-b/2}_{y+b/2}\frac{\Gamma(y-q)}{q}\;\mathrm{d}q$$&lt;/p&gt;

&lt;p&gt;Feynman&amp;rsquo;s favourite trick, differentiating under the integral sign:&lt;/p&gt;

&lt;p&gt;$$ \require{cancel} \frac{\mathrm{d}}{\mathrm{d}y}\int^{y-b/2}_{y+b/2}\frac{\Gamma(y-q)}{q}\;\mathrm{d}q = \cancel{\frac{\Gamma(b/2)}{y-b/2}} - \cancel{\frac{\Gamma(-b/2)}{y+b/2}} + \int^{y-b/2}_{y+b/2}\frac{\partial}{\partial y}\frac{\Gamma(y-q)}{q}\;\mathrm{d}q $$&lt;/p&gt;

&lt;p&gt;Mapping the variables back:&lt;/p&gt;

&lt;p&gt;$$ \int^{y-b/2}_{y+b/2}\frac{\partial}{\partial y}\frac{\Gamma(y-q)}{q}\;\mathrm{d}q = \int^{b/2}_{-b/2}\frac{\Gamma&amp;rsquo;(x)}{y-x}\;\mathrm{d}x$$&lt;/p&gt;

&lt;p&gt;Solving the original integral:&lt;/p&gt;

&lt;p&gt;$$ = \int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\delta\Gamma(x)\frac{\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\;\mathrm{d}x + \int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\delta\Gamma(y)\frac{\Gamma&amp;rsquo;(x)}{y - x}\;\mathrm{d}x\;\mathrm{d}y $$&lt;/p&gt;

&lt;p&gt;Switching the variables of integration in the second expression, we get:&lt;/p&gt;

&lt;p&gt;$$\delta C_{D,i} = 2\int^{b/2}_{-b/2}\int^{b/2}_{-b/2}\delta\Gamma(x)\frac{\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\;\mathrm{d}x $$&lt;/p&gt;

&lt;p&gt;Combining this with the constrant, $\delta C_{D,i} - \lambda\delta L = 0 $ becomes:&lt;/p&gt;

&lt;p&gt;$$ \int^{b/2}_{-b/2}\delta\Gamma(x)\;\mathrm{d}x \left[\int^{b/2}_{-b/2}\frac{2\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\ - \lambda\right] = 0 $$&lt;/p&gt;

&lt;p&gt;Using the constraint on the lift across the wing, this results in:&lt;/p&gt;

&lt;p&gt;$$ \int^{b/2}_{-b/2}\frac{2\Gamma&amp;rsquo;(y)}{x - y}\;\mathrm{d}y\ - \lambda = 0 $$&lt;/p&gt;

&lt;p&gt;The first term is part of the integral from the downwash expression at the beginning of the post, indicating that the downwash across the lifting line for minimum induced drag is constant:&lt;/p&gt;

&lt;p&gt;$$ w = \frac{\lambda}{8\pi} = w_0 $$&lt;/p&gt;

&lt;p&gt;The same result as seen in Anderson, more rigorously!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://godotmisogi.github.io/bloggy/about/</link>
      <pubDate>Mon, 26 Dec 2016 01:45:08 +0530</pubDate>
      
      <guid>https://godotmisogi.github.io/bloggy/about/</guid>
      <description>&lt;p&gt;Hello! I&amp;rsquo;m Arjit Seth, a student currently in my 3rd year of aeronautical engineering at Manipal Institute of Technology in India.&lt;/p&gt;

&lt;p&gt;My major interests (which inspired me to start this blog) are physics, mathematics, aerodynamics and music. I enjoy writing music, solving puzzles, chatting on &lt;code&gt;##math&lt;/code&gt; and &lt;code&gt;##physics&lt;/code&gt; on IRC, figuring out odd time signatures in music, reading manga/watching anime, attempting amateur design and a lot more!&lt;/p&gt;

&lt;p&gt;My current exploits which I&amp;rsquo;m probably going to blog about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning Quantum Mechanics, Quantum Field Theory and General Relativity.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Performing computational fluid dynamics analyses.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Implementing flight dynamics control systems in multirotors and R/C aircraft.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Learning Group Theory, Topology and Graph Theory.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Programming physics and aerodynamics simulations in various languages.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Developing music production skills for various genres.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A more comprehensive overview is available in my &lt;a href=&#34;../Arjit Resume.pdf&#34; target=&#34;_blank&#34;&gt;résumé&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Roots of Unity</title>
      <link>https://godotmisogi.github.io/bloggy/post/roots-of-unity/</link>
      <pubDate>Sun, 25 Dec 2016 02:43:36 +0530</pubDate>
      
      <guid>https://godotmisogi.github.io/bloggy/post/roots-of-unity/</guid>
      <description>&lt;p&gt;During my second year of the International Baccalaureate: Diploma Programme, we were assigned the task of making a portfolio for a problem statement in Mathematics HL. While I don&amp;rsquo;t have the problem statement anymore, I&amp;rsquo;ll outline the major points of the task:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the solutions to $z^n - 1 = 0,\; z \in \mathbb{C}$.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Plot these solutions on the Argand plane.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Draw a tree diagram starting from the trivial solution $z = 1$ to every other root.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Investigate the exercise, devise a conjecture and prove it.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I first read through this exercise, I didn&amp;rsquo;t really expect anything interesting to show up. Well, I was horribly wrong; something really cool showed up which made me learn about a lot of little things in complex analysis as a result. I&amp;rsquo;ll start by solving the above points sequentially -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The solutions to $z^n - 1 = 0$ are obtained most easily through Euler&amp;rsquo;s form:&lt;br /&gt;
$$ z_k = \exp\left(\frac{2k\pi i}{n}\right),\;\;k = 0,&amp;hellip;,n-1 $$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As they are the roots of unity, they appear as points on the unit circle in the Argand plane. For example, $z^5 - 1 = 0$ has the following solutions and tree diagram:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;../Roots2.svg&#34; width = &#34;80%&#34;&gt;&lt;/div&gt;&lt;br /&gt;
&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The easiest observation is:&lt;br /&gt;
$$ \sum^{n-1}_{k = 0} z_k = 0 $$&lt;br /&gt;
The roots of unity can be factorised into the following irreducible form over the field of real numbers:&lt;br /&gt;
$$ z^n - 1 = (z-1)\sum^{n-1}_{i = 0} z^i $$&lt;br /&gt;
And can be factorised over the complex field as:&lt;br /&gt;
$$ z^n - 1 = \prod_{k=0}^{n-1}(z-z_k) = (z-1)\prod_{k=1}^{n-1}(z-z_k) $$&lt;br /&gt;
A conjecture based on trial and error is:&lt;br /&gt;
$$ \prod_{k=1}^{n-1}|z_k - z_0| = \prod_{k=1}^{n-1}|1-z_k| = n$$&lt;br /&gt;
This states that the product of the distances between each root from a selected root is equal to the number of roots. To prove this, notice that:&lt;br /&gt;
$$\sum^{n-1}_{i = 0} z^i = \prod_{k=1}^{n-1}(z-z_k) = \frac{z^n - 1}{z-1}$$&lt;br /&gt;
For the equalities to be sensible at $z=1$, one must perform analytic continuation:&lt;br /&gt;
$$\sum^{n-1}_{i = 0} 1^i = \prod_{k=1}^{n-1}|1-z_k| = \lim_{z\rightarrow 1} \frac{z^n - 1}{z-1}$$&lt;br /&gt;
The first equality proves the conjecture. The last equality is evaluated using L&amp;rsquo;Hôpital&amp;rsquo;s rule, also proving the conjecture:&lt;br /&gt;
$$ \lim_{z\rightarrow 1} \frac{z^n - 1}{z-1} = \lim_{z\rightarrow 1} nz^{n-1} = n $$&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>